name: Partial Compare & Publish

on:
  workflow_dispatch:

jobs:
  prepare-matrix:
    name: Prepare comparison matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - name: Install yq and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq jq curl

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Set current date for cache
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Restore cache for validator_cli.jar
        uses: actions/cache@v3
        with:
          path: tmp/validator_cli.jar
          key: ${{ runner.os }}-validator-cli-${{ env.TODAY }}
          restore-keys: |
            ${{ runner.os }}-validator-cli-

      - name: Download validator_cli.jar (if not cached)
        run: |
          mkdir -p tmp
          if [ ! -f tmp/validator_cli.jar ]; then
            echo "Cache miss - downloading validator CLI"
            curl -L -o tmp/validator_cli.jar https://github.com/hapifhir/org.hl7.fhir.core/releases/latest/download/validator_cli.jar
          else
            echo "Using cached validator CLI"
          fi

      - name: Save cache for validator_cli.jar
        uses: actions/cache@v3
        with:
          path: tmp/validator_cli.jar
          key: ${{ runner.os }}-validator-cli-${{ env.TODAY }}

      - name: Determine comparisons to run
        id: set-matrix
        run: |
          set -euo pipefail

          CONFIG_PATH=".github/config/ComparisonConfig.yml"
          PROFILES_JSON=$(yq -c '.profiles' "$CONFIG_PATH")

          if [ "$PROFILES_JSON" = "null" ]; then
            PROFILES_JSON="[]"
          fi

          STATUS_JSON="{}"
          if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
            git fetch --depth=1 origin gh-pages
            if git show origin/gh-pages:Comparison/status.json >/tmp/status.json 2>/dev/null; then
              STATUS_JSON=$(jq -c '.' /tmp/status.json)
            fi
          fi

          MATRIX=$(jq -n \
            --argjson profiles "$PROFILES_JSON" \
            --argjson status "$STATUS_JSON" '
              [ $profiles[] | select((($status[.dest].status // "missing") != "success")) ]
            ')

          echo "Resolved comparison matrix: $MATRIX"
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  compare:
    name: Compare ${{ matrix.profile.dest }}
    runs-on: ubuntu-latest
    needs: prepare-matrix
    if: ${{ needs.prepare-matrix.outputs.matrix != '[]' && needs.prepare-matrix.outputs.matrix != '' }}
    strategy:
      matrix:
        profile: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      max-parallel: 4

    steps:
      - uses: actions/checkout@v3

      - name: Set up yq
        run: |
          YQ_VERSION=v4.40.5
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Ensure workspace directories exist
        run: mkdir -p tmp

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Set current date for cache
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Restore cache for validator_cli.jar
        uses: actions/cache@v3
        with:
          path: tmp/validator_cli.jar
          key: ${{ runner.os }}-validator-cli-${{ env.TODAY }}
          restore-keys: |
            ${{ runner.os }}-validator-cli-

      - name: Copy manually unpacked packages into Firely cache
        run: |
          CACHE_DIR="$HOME/.fhir/packages"
          if [ -d "PackagesForCache" ]; then
            for pkgdir in PackagesForCache/*; do
              if [ -d "$pkgdir/package" ]; then
                pkg_id=$(basename "$pkgdir")
                target_dir="$CACHE_DIR/$pkg_id"
                echo "Copying $pkgdir into $target_dir"
                mkdir -p "$target_dir"
                cp -r "$pkgdir/package" "$target_dir/"
              else
                echo "Skipping $pkgdir - no package/ subfolder found"
              fi
            done
          else
            echo "No PackagesForCache directory found - skipping"
          fi

      - name: Set artifact name
        id: vars
        run: |
          dest='${{ matrix.profile.dest }}'
          echo "artifact_name=$(basename "$dest")" >> "$GITHUB_OUTPUT"

      - name: Run comparison
        run: |
          set -euo pipefail

          dest='${{ matrix.profile.dest }}'
          name=$(basename "$dest")
          leftIg='${{ matrix.profile.leftIg }}'
          rightIg='${{ matrix.profile.rightIg }}'
          leftProfile='${{ matrix.profile.leftProfile }}'
          rightProfile='${{ matrix.profile.rightProfile }}'

          mkdir -p "$dest"
          echo "Comparing $name"

          status="failure"
          if JAVA_TOOL_OPTIONS=-Djava.awt.headless=true \
            java -jar tmp/validator_cli.jar -compare -dest "$dest" -version 4.0 \
              -ig "${leftIg//@/#}" -ig "${rightIg//@/#}" \
              -left "$leftProfile" -right "$rightProfile" > "$dest/compare.log" 2>&1; then
            echo "Comparison for $name succeeded"
            status="success"
          else
            echo "Comparison for $name failed"
          fi

          cat <<EOF > "$dest/status.json"
          {
            "status": "$status",
            "run_id": "${{ github.run_id }}",
            "updated_at": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          }
          EOF

      - name: Upload comparison result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name }}
          path: ${{ matrix.profile.dest }}
          retention-days: 1

  post-process:
    name: Generate index & deploy
    runs-on: ubuntu-latest
    needs: compare
    if: ${{ needs.prepare-matrix.outputs.matrix != '[]' && needs.prepare-matrix.outputs.matrix != '' }}
    steps:
      - uses: actions/checkout@v3

      - name: Download new comparison results
        uses: actions/download-artifact@v4
        with:
          path: DownloadedComparisons

      - name: Collect downloaded comparison files
        run: |
          set -euo pipefail
          mkdir -p NewComparison
          shopt -s nullglob
          for artifact_dir in DownloadedComparisons/*; do
            [ -d "$artifact_dir" ] || continue
            if [ -d "$artifact_dir/Comparison" ]; then
              (cd "$artifact_dir/Comparison" && tar cf - .) | (cd NewComparison && tar xf -)
            else
              (cd "$artifact_dir" && tar cf - .) | (cd NewComparison && tar xf -)
            fi
          done
          shopt -u nullglob
          rm -rf DownloadedComparisons

      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
          fetch-depth: 1
        continue-on-error: true

      - name: Prepare combined comparison directory
        run: |
          set -euo pipefail

          mkdir -p Comparison

          if [ -d gh-pages/Comparison ]; then
            (cd gh-pages/Comparison && tar cf - .) | (cd Comparison && tar xf -)
          fi

          if [ -d NewComparison ]; then
            (cd NewComparison && tar cf - .) | (cd Comparison && tar xf -)
          fi

      - name: Update status file
        run: |
          python <<'PY'
          import json
          import os
          import glob
          from datetime import datetime, timezone

          status = {}

          for entry in sorted(glob.glob(os.path.join("Comparison", "*"))):
              if not os.path.isdir(entry):
                  continue

              dest = entry.replace("\\", "/")
              status_file = os.path.join(entry, "status.json")
              data = None

              if os.path.isfile(status_file):
                  try:
                      with open(status_file, "r", encoding="utf-8") as handle:
                          data = json.load(handle)
                  except json.JSONDecodeError:
                      data = None

              if data is None:
                  index_exists = os.path.isfile(os.path.join(entry, "index.html"))
                  log_exists = os.path.isfile(os.path.join(entry, "compare.log"))
                  if index_exists and not log_exists:
                      state = "success"
                  elif log_exists:
                      state = "failure"
                  else:
                      state = "unknown"
                  data = {
                      "status": state,
                      "updated_at": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
                  }
              else:
                  data.setdefault(
                      "updated_at",
                      datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
                  )

              status[dest] = data

          with open("Comparison/status.json", "w", encoding="utf-8") as handle:
              json.dump(status, handle, indent=2, sort_keys=True)
          PY

      - name: Generate central index.html
        run: |
          python <<'PY'
          import json
          import html
          import os

          status_path = "Comparison/status.json"
          try:
              with open(status_path, "r", encoding="utf-8") as handle:
                  status = json.load(handle)
          except FileNotFoundError:
              status = {}

          items = []
          for dest in sorted(status):
              rel = dest.split("Comparison/", 1)[-1] if dest.startswith("Comparison/") else dest
              display = rel
              folder_path = os.path.join("Comparison", rel)
              entry = status[dest]
              verdict = entry.get("status", "unknown")
              timestamp = entry.get("updated_at")
              suffix = f" ({timestamp})" if timestamp else ""
              index_exists = os.path.isfile(os.path.join(folder_path, "index.html"))
              log_exists = os.path.isfile(os.path.join(folder_path, "compare.log"))

              if index_exists and verdict == "success":
                  items.append(f'<li><a href="{html.escape(rel)}/index.html">{html.escape(display)}</a>{html.escape(suffix)}</li>')
              elif log_exists:
                  items.append(f'<li><strong>{html.escape(display)}</strong>: {html.escape(verdict.title())}{html.escape(suffix)} - <a href="{html.escape(rel)}/compare.log">View log</a></li>')
              else:
                  items.append(f'<li><strong>{html.escape(display)}</strong>: {html.escape(verdict.title())}{html.escape(suffix)}</li>')

          if not items:
              items.append("<li>No comparison results available</li>")

          content = """<html><head><title>Overview</title></head>
          <body><h1>Result overview</h1><ul>
          {items}
          </ul></body></html>
          """.format(items="\n".join(items))

          with open("Comparison/index.html", "w", encoding="utf-8") as handle:
              handle.write(content)
          PY

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: 'Comparison'
          clean: false
